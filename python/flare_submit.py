#use: module load other/SSSO_Ana-PyD/SApd_2.4.0_py2.7
import os
import sys
import platform
import flare
import argparse
flare.ReIm_npts=8192
parnames=["m1","m2","tRef","phiRef","distance","lambda","beta","inclination","polarization"]
Npar=len(parnames)

def read_params(filename):
    keys=[]
    vals=[]
    print "Reading params from file '"+filename+"'"
    with open(filename,'r') as f:
        line="#"
        while(not "Injection parameters" in line): line=f.readline() #Skip any front matter
        line=f.readline() #skip one line
        line=f.readline() 
        while(not "---------" in line):
            cols = line.split()
            keys.append(cols[0][:-1]) 
            vals.append(float(cols[1]))
            line=f.readline() 
    parbyname=dict(zip(keys, vals))
    #print "parbyname:\n",parbyname
    pars=[parbyname[name] for name in parnames]
    return pars

script_discover="""#!/usr/bin/csh
###This file autogenerated by flare_submit.py  
#SBATCH --job-name=SCRIPT_NAME
#SBATCH --nodes=SCRIPT_NODES --ntasks=SCRIPT_TASKS --constraint=hasw
#SBATCH --time=SCRIPT_HOURS:SCRIPT_MINS:00
#SBATCH --account=s0982
SCRIPT_DEBUG

module purge
module load comp/intel-15.0.3.187 lib/mkl-15.0.3.187 mpi/impi-5.0.3.048
setenv ROM_DATA_PATH /discover/nobackup/jgbaker/GW-DA/flare/ROMdata/q1-12_Mfmin_0.0003940393857519091
set outdir=./SCRIPT_TAG-ntSCRIPT_TASKS
mkdir -p $outdir
cd $outdir
setenv OMP_NUM_THREADS SCRIPT_THREADS;
SCRIPT_FISHER_COMMAND
time mpirun -np SCRIPT_TASKS SCRIPT_COMMAND > SCRIPT_NAME.out

exit 0
"""

script_macos="""#!/usr/bin/csh
###This file autogenerated by flare_submit.py  
setenv ROM_DATA_PATH SCRIPT_ROM_DATA_PATH 
set outdir=./SCRIPT_TAG-ntSCRIPT_TASKS
mkdir -p $outdir
cd $outdir
setenv OMP_NUM_THREADS SCRIPT_THREADS;
#Note: The following construction kills the run after SCRIPT_HOURS:SCRIPT_MINS:00, to mimic queue submission
sh -c '{   \\
  SCRIPT_FISHER_COMMAND ; \\
  time SCRIPT_COMMAND ; \\
  kill 0; } 1>SCRIPT_NAME.out 2>&1 | { sleep SCRIPT_KILL_AFTER_SECONDS; kill 0; }'
exit 0
"""

if __name__ == "__main__":    
    print "Running flare_submit.generate as main program."
    #detect system
    system="discover"
    if(platform.system()=="Darwin"):
        system="macos"
    generate(system,sys.argv)

def generate(system,argv):    
    if(system=="discover"):
        script=script_discover
        procs_per_node=24
    elif(system=="macos"):
        script=script_macos
        procs_per_node=8
    else:
        sys.exit("System '"+str(system)+"' not recognized.")

    #set up command-line arguments
    parser = argparse.ArgumentParser(description="generate a discover queue script for a flare run");
    paramsgroup = parser.add_mutually_exclusive_group(required=True)
    parser.add_argument('name',help="The basename for the run")
    parser.add_argument('snr',help="SNR for the run",type=float,default=-1)
    paramsgroup.add_argument('-p',help="List "+str(Npar)+" injection parameters for the run",nargs=Npar,type=float)
    paramsgroup.add_argument('-f',help="Provide filename with injection parameters")
    parser.add_argument('-d',help="Run in debug mode",action="store_true")
    parser.add_argument('--mcmc',help="Run with ptmcmc instead of bambi",action="store_true")
    parser.add_argument('-n',help="Number of bambi-nodes or ptmcmc-threads to run on (default 1 node or "+str(procs_per_node)+" threads)",type=int,default=-1)
    parser.add_argument('-t',help="Time in hours to run (default 12, but always 1 or 0 with debug)",type=int,default=-1)
    parser.add_argument('-m',help="Time: addtional minutes to run (default 00)",type=int,default=0)
    parser.add_argument('--lm22',help="Use only the 22 mode.",action="store_true")
    parser.add_argument('--live',help="Set number of nested sampling live points for bambi default=4000).",default=4000)

    args=parser.parse_args(argv)

    #We assume that the script is located in the flare/python directory
    #below [:-7] is to strip "/python 
    #flare_path= os.path.dirname(os.path.realpath(__file__))[:-7]
    flare_path=flare.flare_dir

    name=args.name
    hours=args.t
    minutes=args.m
    nodes=args.n

    if(hours<0):
        if(minutes>0):hours=0
        else:hours=12
    total_seconds=3600*hours+60*minutes
    checkp_seconds=(int)((total_seconds-300)*0.99)

    #Setup flare flags
    if(args.p is None):
        params=read_params(args.f)
    else:
        params=args.p
    flags=flare.set_flare_flags(args.snr,params)
    if(args.lm22):flags+=" --nbmodeinj 1 --nbmodetemp 1" #for no higher modes in injection and template

    #generate fisher command
    fcmd   = flare.getFisherCommand(name+"-Fisher")+" "+flags

    #generate the sampler command
    if(not args.mcmc):
        sampler="bambi"
        if(nodes<1):nodes=1
        tasks=nodes*(procs_per_node-3)
        fthreads=procs_per_node-3
        threads=1
        cmd   = flare_path+"/LISAinference/LISAinference"
        flags += flare.set_bambi_flags(name,nlive=args.live)
    else:
        sampler="ptmcmc"
        if(nodes<1):nodes=procs_per_node
        threads=nodes
        fthreads=threads
        nodes=1
        tasks=1
        cmd   = flare_path+"/LISAinference/LISAinference_ptmcmc"
        flags += flare.set_mcmc_flags(name,60) + " --noFisher "
        flags += "--checkp_at_time="+str(checkp_seconds)+" "
        #flags += "--covariance_file="+name+"-Fisher_fishcov.dat"

    #finish commands
    cmd = cmd+" "+flags
    fcmd = "export OMP_NUM_THREADS="+str(fthreads)+" ; "+fcmd+" 1>"+name+"-Fisher.out 2>&1"


    if args.d:
        debug="#SBATCH --qos=debug\n"
        if(60*hours+minutes>60):
            hours=1
            minutes=0
    else:
        debug=""


    #Replace tags:
    #SCRIPT_NAME
    script = script.replace("SCRIPT_NAME", name)
    #SCRIPT_SAMPLER
    tag=name+"-"+sampler
    script = script.replace("SCRIPT_TAG", tag)
    #SCRIPT_NODES
    script = script.replace("SCRIPT_NODES", str(nodes))
    #SCRIPT_HOURS
    script = script.replace("SCRIPT_HOURS", str(hours))
    #SCRIPT_MINS
    script = script.replace("SCRIPT_MINS", str(minutes))
    #SCRIPT_TASKS
    script = script.replace("SCRIPT_TASKS", str(tasks))
    #SCRIPT_THREADS
    script = script.replace("SCRIPT_THREADS", str(threads))
    #SCRIPT_COMMAND
    script = script.replace("SCRIPT_COMMAND", cmd)
    #SCRIPT_FISHER_COMMAND
    script = script.replace("SCRIPT_FISHER_COMMAND", fcmd )
    #SCRIPT_DEBUG
    script = script.replace("SCRIPT_DEBUG", debug)
    #SCRIPT_KILL_AFTER_SECONDS
    script = script.replace("SCRIPT_KILL_AFTER_SECONDS", str(total_seconds))
    #SCRIPT_ROM_DATA_PATH
    script = script.replace("SCRIPT_ROM_DATA_PATH", flare_path+"/"+flare.ROM_DATA_PATH)

    print script

    with open(tag+".sub",'w') as file:
        file.write(script)
        file.close()

